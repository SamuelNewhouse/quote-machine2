{"version":3,"sources":["images/twitter-logo.svg","images/google-logo.svg","components/Author.js","components/Text.js","util/random-wikiquote.js","actions.js","components/NewQuote.js","components/TweetQuote.js","components/GoogleQuote.js","components/Error.js","components/Fetching.js","components/BlockQuote.js","components/QuoteBox.js","reducers.js","index.js"],"names":["module","exports","__webpack_require__","p","connect","state","author","props","react_default","a","createElement","className","id","title","quote","RandomWikiquote","BASE_URL","ELEMENTS_TO_KEEP","minLength","maxLength","numericLimit","setMinLength","min","setMaxLength","max","setNumericLimit","percentage","isQuoteValid","length","digitPercentage","match","ajaxGet","url","Promise","resolve","reject","xmlhttp","XMLHttpRequest","onreadystatechange","status","readyState","data","JSON","parse","responseText","error","open","send","getRandomPage","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","t0","abrupt","query","random","stop","apply","this","arguments","getSectionsForPage","_ref2","_callee2","pageId","sectionArray","sections","s","splitNum","_context2","number","split","push","index","titles","_x","getQuotesForSection","_ref3","_callee3","sectionIndex","validQuotes","quotes","parser","html","allQuotes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","children","_arr","_i","child","plainQuote","_context3","text","DOMParser","parseFromString","querySelectorAll","undefined","Symbol","iterator","done","value","Array","from","includes","tagName","replaceChild","document","createTextNode","innerText","replace","trim","t1","return","finish","_x2","_x3","getRandomQuote","randomNum","Math","floor","randomQuote","numRetry","checkRetry","reason","console","log","mainSequence","then","chooseQuote","theQuote","catch","FETCHING_QUOTE","FETCH_QUOTE_FAILURE","FETCH_QUOTE_SUCCESS","fetchQuote","dispatch","type","isFetching","randomWikiquote","quoteData","fetchQuoteSuccess","fetchQuoteFailure","_ref$value","onClick","tweetURL","encodeURIComponent","href","target","rel","src","twitterLogo","alt","googleURL","googleLogo","Error","Fragment","components_NewQuote","Fetching","role","BlockQuote","getView","components_BlockQuote","components_Error","components_Fetching","components_Text","components_Author","components_TweetQuote","GoogleQuote","QuoteBox","Component","initialState","handleActions","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","components_QuoteBox","getElementById"],"mappings":"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","file":"static/js/main.b9f09f19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter-logo.d498cedd.svg\";","module.exports = __webpack_public_path__ + \"static/media/google-logo.72232123.svg\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Author = props => {\r\n  const author = props.author;\r\n  return (\r\n    <footer className=\"blockquote-footer\"><cite id=\"author\" title={author}>{author}</cite></footer>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    author: state.author\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Author);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Text = (props) => {\r\n  return (\r\n    <p id=\"text\">{props.quote}</p>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    quote: state.quote\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Text);","/**\r\n * An API for getting random quotes from random pages on the English Wikiquote site.\r\n *\r\n * RandomWikiquote.getRandomQuote() returns a promise that will resolve when a valid\r\n * quote is found and reject if the RETRY_LIMIT is exceeded. A resolved promise returns\r\n * an object with the keys \"title\" and \"quote\".\r\n *\r\n * Title can be many things. It can be a person who said the quote, but it can also be\r\n * the name of the show, movie, game, book, etc. the quote is from.\r\n *\r\n * https://github.com/SamuelNewhouse/random-wikiquote\r\n */\r\nconst RandomWikiquote = {};\r\n\r\nconst BASE_URL = \"https://en.wikiquote.org/w/api.php?origin=*&format=json\";\r\nconst RETRY_LIMIT = 5;\r\nconst ELEMENTS_TO_KEEP = [ // These elements might contain the quote or parts of it.\r\n  'A', 'B', 'I', 'STRONG', 'EM', 'MARK', 'ABBR', 'SMALL',\r\n  'DEL', 'INS', 'SUB', 'SUP', 'PRE', 'CODE', 'DFN', 'SAMP'\r\n];\r\n\r\nlet minLength = 10;\r\nlet maxLength = 300;\r\nlet numericLimit = 0.1; // Some \"quotes\" are just dates and times. Those are filtered out.\r\n\r\nRandomWikiquote.setMinLength = (min) => minLength = min;\r\nRandomWikiquote.setMaxLength = (max) => maxLength = max;\r\nRandomWikiquote.setNumericLimit = (percentage) => numericLimit = percentage;\r\n\r\nconst isQuoteValid = quote => {\r\n  if (!quote)\r\n    return false;\r\n\r\n  const length = quote.length;\r\n  const digitPercentage = (quote.match(/\\d/g) || []).length / length;\r\n\r\n  if (length < minLength || length > maxLength || digitPercentage > numericLimit)\r\n    return false;\r\n  return true;\r\n};\r\n\r\nconst ajaxGet = (url) => {\r\n  return new Promise((resolve, reject) => {\r\n    const xmlhttp = new XMLHttpRequest();\r\n\r\n    xmlhttp.onreadystatechange = () => {\r\n      const status = xmlhttp.status;\r\n\r\n      if (xmlhttp.readyState !== 4 || status === 0)\r\n        return;\r\n      else if (status !== 200) {\r\n        reject(\"Invalid Response: \" + status);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const data = JSON.parse(xmlhttp.responseText);\r\n        resolve(data);\r\n      }\r\n      catch (error) {\r\n        reject(error);\r\n      }\r\n    };\r\n\r\n    xmlhttp.open(\"GET\", url, true);\r\n    xmlhttp.send();\r\n  });\r\n}\r\n\r\n/**\r\n * Gets a random page id from the main namespace.\r\n */\r\nconst getRandomPage = async () => {\r\n  const url = BASE_URL + \"&action=query&list=random&rnnamespace=0&rnlimit=1\";\r\n  let data = null;\r\n\r\n  try {\r\n    data = await ajaxGet(url);\r\n  }\r\n  catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n\r\n  const id = data.query.random[0].id;\r\n  if (!id)\r\n    return Promise.reject(\"Invalid random page id.\");\r\n  return id;\r\n}\r\n\r\n/**\r\n* Get the sections for a given page to make parsing easier.\r\n* Returns the title in case there is a redirect.\r\n*/\r\nconst getSectionsForPage = async (pageId) => {\r\n  const url = BASE_URL + \"&action=parse&prop=sections&pageid=\" + pageId;\r\n  let data = null;\r\n\r\n  try {\r\n    data = await ajaxGet(url);\r\n  }\r\n  catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n\r\n  const sectionArray = [];\r\n  const sections = data.parse.sections;\r\n\r\n  for (let s in sections) {\r\n    let splitNum = sections[s].number.split('.');\r\n    if (splitNum.length > 1 && splitNum[0] === \"1\")\r\n      sectionArray.push(sections[s].index);\r\n  }\r\n\r\n  if (sectionArray.length === 0)\r\n    sectionArray.push(\"1\"); // Use section 1 if there are no \"1.x\" sections\r\n\r\n  return { pageId: pageId, titles: data.parse.title, sections: sectionArray };\r\n}\r\n\r\n/**\r\n * Gets all valid quotes for a given section.\r\n * Returns the title in case there is a redirect.\r\n */\r\nconst getQuotesForSection = async (pageId, sectionIndex) => {\r\n  const url = BASE_URL + \"&action=parse&noimages=&pageid=\" + pageId + \"&section=\" + sectionIndex;\r\n  let data = null;\r\n\r\n  try {\r\n    data = await ajaxGet(url);\r\n  }\r\n  catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n\r\n  if (!data.parse) return Promise.reject(\"Section is not valid.\");\r\n\r\n  const validQuotes = []\r\n  const quotes = data.parse.text[\"*\"];\r\n  const parser = new DOMParser();\r\n  const html = parser.parseFromString(quotes, 'text/html');\r\n  const allQuotes = html.querySelectorAll('div > ul > li');\r\n\r\n  for (let quote of allQuotes) {\r\n    // Must be array instead of live collection in case we remove multiple elements.\r\n    let children = Array.from(quote.children);\r\n\r\n    // Replace unwanted elements with spaces to avoid running words together.\r\n    for (let child of children)\r\n      if (!ELEMENTS_TO_KEEP.includes(child.tagName))\r\n        quote.replaceChild(document.createTextNode(\" \"), child);\r\n\r\n    let plainQuote = quote.innerText;\r\n    // Turn all consecutive whitespaces into single spaces.\r\n    plainQuote = plainQuote.replace(/\\s\\s+/gmi, ' ');\r\n    plainQuote = plainQuote.trim();\r\n\r\n    if (isQuoteValid(plainQuote))\r\n      validQuotes.push(plainQuote);\r\n  }\r\n\r\n  if (validQuotes.length === 0)\r\n    return Promise.reject(\"Section has no valid quote.\");\r\n\r\n  return { titles: data.parse.title, quotes: validQuotes };\r\n}\r\n\r\n/**\r\n * Gets a random quote from a random page in the main namespace.\r\n * Keeps trying for a valid quote until RETRY_LIMIT is reached.\r\n */\r\nconst getRandomQuote = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const randomNum = max => Math.floor(Math.random() * max);\r\n    const randomSection = sections => sections[randomNum(sections.length)];\r\n    const randomQuote = quotes => quotes.quotes[randomNum(quotes.quotes.length)];\r\n    const chooseQuote = quotes => ({ title: quotes.titles, quote: randomQuote(quotes) });\r\n\r\n    let numRetry = 0;\r\n    const checkRetry = (reason) => {\r\n      console.log(reason + \" Retrying...\");\r\n\r\n      if (++numRetry > RETRY_LIMIT)\r\n        reject(\"Retry limit reached.\");\r\n      else\r\n        mainSequence();\r\n    }\r\n\r\n    var mainSequence = () => {\r\n      getRandomPage()\r\n        .then(pageId => getSectionsForPage(pageId))\r\n        .then(data => getQuotesForSection(data.pageId, randomSection(data.sections)))\r\n        .then(quotes => chooseQuote(quotes))\r\n        .then(theQuote => resolve(theQuote))\r\n        .catch(reason => checkRetry(reason));\r\n    };\r\n\r\n    mainSequence();\r\n  });\r\n};\r\n\r\nRandomWikiquote.getRandomQuote = getRandomQuote;\r\nexport default RandomWikiquote;","import randomWikiquote from './util/random-wikiquote';\r\n\r\nexport const FETCHING_QUOTE = 'FETCHING_QUOTE';\r\nexport function fetchingQuote() {\r\n  return {\r\n    type: FETCHING_QUOTE,\r\n    isFetching: true\r\n  }\r\n}\r\n\r\nexport const FETCH_QUOTE_FAILURE = 'FETCH_QUOTE_FAILURE';\r\nexport function fetchQuoteFailure(error) {\r\n  return {\r\n    type: FETCH_QUOTE_FAILURE,\r\n    error: error\r\n  }\r\n}\r\n\r\nexport const FETCH_QUOTE_SUCCESS = 'FETCH_QUOTE_SUCESS';\r\nexport function fetchQuoteSuccess(quoteData) {\r\n  return {\r\n    type: FETCH_QUOTE_SUCCESS,\r\n    author: quoteData.title,\r\n    quote: quoteData.quote\r\n  }\r\n}\r\n\r\nexport function fetchQuote() {\r\n  return function (dispatch) {\r\n    dispatch(fetchingQuote());\r\n\r\n    return randomWikiquote.getRandomQuote().then(\r\n      quoteData => { dispatch(fetchQuoteSuccess(quoteData)) },\r\n      error => { dispatch(fetchQuoteFailure(error)) }\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchQuote } from '../actions';\r\n\r\nconst NewQuote = ({ fetchQuote, value = \"New Quote\" }) => {\r\n  return (\r\n    <span className=\"flex-grow-1 text-right\">\r\n      <button className=\"hovertip btn btn-dark\" id=\"new-quote\" onClick={fetchQuote}>\r\n        {value}\r\n        <span className=\"hovertiptext hovertip-right rounded\">Get new quote.</span>\r\n      </button>\r\n    </span>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchQuote: () => dispatch(fetchQuote())\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(NewQuote);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport twitterLogo from '../images/twitter-logo.svg'\r\n\r\nconst TweetQuote = ({ author, quote }) => {\r\n  const textURI = encodeURIComponent('\"' + quote + '\" - ' + author);\r\n  const tweetURL = \"https://twitter.com/intent/tweet?text=\" + textURI;\r\n\r\n  return (\r\n    <a className=\"hovertip btn btn-dark\" id=\"tweet-quote\" href={tweetURL} target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <img src={twitterLogo} alt=\"Tweet this quote.\"></img>\r\n      <span className=\"hovertiptext rounded\">Tweet this quote.</span>\r\n    </a>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    author: state.author,\r\n    quote: state.quote\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TweetQuote);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport googleLogo from '../images/google-logo.svg'\r\n\r\nconst TweetQuote = ({ author, quote }) => {\r\n  const textURI = encodeURIComponent(quote + ' ' + author);\r\n  const googleURL = \"https://www.google.com/search?q=\" + textURI;\r\n\r\n  return (\r\n    <a className=\"hovertip btn btn-dark ml-2\" id=\"tweet-quote\" href={googleURL} target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <img src={googleLogo} alt=\"Google this quote.\"></img>\r\n      <span className=\"hovertiptext rounded\">Google this quote.</span>\r\n    </a>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    author: state.author,\r\n    quote: state.quote\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TweetQuote);","import React from 'react';\r\nimport NewQuote from './NewQuote'\r\n\r\nconst Error = () => {\r\n  return (\r\n    <>\r\n      <p><strong>Error</strong> getting quote from <em>en.wikiquote.org</em>.</p>\r\n      <NewQuote value=\"Try Again\" />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Error;","import React from 'react';\r\n\r\nconst Fetching = () => {\r\n  return (\r\n    <>\r\n      <div className=\"spinner-border mb-4\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n      <footer className=\"blockquote-footer\"><cite>Getting random quote from <em>en.wikiquote.org</em>...</cite></footer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Fetching;","import React from 'react';\r\n\r\nconst BlockQuote = (props) => {\r\n  return <blockquote className=\"blockquote p-3 rounded\"> {props.children} </blockquote>\r\n}\r\n\r\n\r\nexport default BlockQuote;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Author from './Author';\r\nimport Text from './Text';\r\nimport NewQuote from './NewQuote';\r\nimport TweetQuote from './TweetQuote';\r\nimport GoogleQuote from './GoogleQuote';\r\nimport Error from './Error';\r\nimport Fetching from './Fetching';\r\nimport BlockQuote from './BlockQuote';\r\nimport { fetchQuote } from '../actions';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport '../styles/style.scss'\r\n\r\nconst normalView = () => {\r\n  return (\r\n    <>\r\n      <BlockQuote>\r\n        <Text />\r\n        <Author />\r\n      </BlockQuote>\r\n      <span className=\"d-flex px-3\">\r\n        <TweetQuote />\r\n        <GoogleQuote />\r\n        <NewQuote />\r\n      </span>\r\n    </>\r\n  )\r\n}\r\n\r\nconst getView = props => {\r\n  if (props.error)\r\n    return (\r\n      <BlockQuote>\r\n        <Error />\r\n      </BlockQuote>\r\n    )\r\n\r\n  if (props.isFetching)\r\n    return (\r\n      <BlockQuote>\r\n        <Fetching />\r\n      </BlockQuote>\r\n    )\r\n\r\n  return normalView();\r\n}\r\n\r\nclass QuoteBox extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchQuote();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"quote-box\">\r\n        {getView(this.props)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isFetching: state.isFetching,\r\n    error: state.error\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchQuote: () => dispatch(fetchQuote())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuoteBox);","import {\r\n  FETCHING_QUOTE,\r\n  FETCH_QUOTE_FAILURE,\r\n  FETCH_QUOTE_SUCCESS\r\n} from './actions';\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  error: null,\r\n  author: \"\",\r\n  quote: \"\"\r\n};\r\n\r\nfunction handleActions(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCHING_QUOTE:\r\n      return Object.assign({}, state, { isFetching: true, error: null });\r\n    case FETCH_QUOTE_FAILURE:\r\n      return Object.assign({}, state, { isFetching: false, error: action.error });\r\n    case FETCH_QUOTE_SUCCESS:\r\n      return Object.assign({}, state, { isFetching: false, error: null, author: action.author, quote: action.quote });\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default handleActions;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport QuoteBox from './components/QuoteBox';\nimport handleActions from \"./reducers\";\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\n\nconst store = createStore(handleActions, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <QuoteBox />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}